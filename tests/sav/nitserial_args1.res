# This file is generated by nitserial
# Do not modify, but you can redef
module test_serialization_serial is
	no_warning("property-conflict")
end

import test_serialization
import serialization

redef class Deserializer
	redef fun deserialize_class(name)
	do
		# Module: test_serialization
		if name == "Array[Text]" then return new Array[Text].from_deserializer(self)
		if name == "Array[Map[String, nullable Object]]" then return new Array[Map[String, nullable Object]].from_deserializer(self)
		if name == "Array[String]" then return new Array[String].from_deserializer(self)
		if name == "Array[Error]" then return new Array[Error].from_deserializer(self)
		if name == "POSet[String]" then return new POSet[String].from_deserializer(self)
		if name == "Array[nullable Object]" then return new Array[nullable Object].from_deserializer(self)
		if name == "HashSet[String]" then return new HashSet[String].from_deserializer(self)
		if name == "Array[nullable FlatString]" then return new Array[nullable FlatString].from_deserializer(self)
		if name == "Array[FlatString]" then return new Array[FlatString].from_deserializer(self)
		if name == "Array[nullable Int]" then return new Array[nullable Int].from_deserializer(self)
		if name == "Array[Int]" then return new Array[Int].from_deserializer(self)
		if name == "Array[nullable Float]" then return new Array[nullable Float].from_deserializer(self)
		if name == "Array[Float]" then return new Array[Float].from_deserializer(self)
		if name == "Array[Object]" then return new Array[Object].from_deserializer(self)
		if name == "Array[Serializable]" then return new Array[Serializable].from_deserializer(self)
		if name == "POSetElement[String]" then return new POSetElement[String].from_deserializer(self)
		if name == "HashMap[String, POSetElement[String]]" then return new HashMap[String, POSetElement[String]].from_deserializer(self)
		if name == "Array[Match]" then return new Array[Match].from_deserializer(self)
		if name == "Array[nullable Match]" then return new Array[nullable Match].from_deserializer(self)
		return super
	end
end
